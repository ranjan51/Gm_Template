trigger:
  - main

variables:
  azureSubscription: '2e8ea5df-06c8-40cc-97a1-4bd73594d716'
  webAppName: 'react-cicd-demo'
  nodeVersion: '20.x'

stages:
- stage: Build
  displayName: Build React App
  jobs:
  - job: Build
    pool:
      name: my-pool
    steps:
    - task: NodeTool@0
      displayName: Install Node.js
      inputs:
        versionSpec: '$(nodeVersion)'

    - script: |
        echo "DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
        echo "SourcesDirectory:       $(Build.SourcesDirectory)"
        echo "Pipeline.Workspace:     $(Pipeline.Workspace)"
        echo "Repo tree (top 2 levels):"
        dir "$(Build.SourcesDirectory)" || ls -la "$(Build.SourcesDirectory)"
        echo "Entering my-app and building..."
        cd "$(Build.SourcesDirectory)/my-app"
        npm ci
        npm run build
        echo "Built dist contents (if any):"
        dir dist || ls -la dist || true
      displayName: Build Vite app

    - powershell: |
        $dist = "$(Build.SourcesDirectory)\my-app\dist"
        Write-Host "Expecting dist at: $dist"
        if (-not (Test-Path $dist)) {
          Write-Error "dist not found at $dist. Check vite.config build.outDir or folder path."
          Write-Host "Vite may have set a different outDir. Dumping my-app after build..."
          Get-ChildItem -Recurse -Force "$(Build.SourcesDirectory)\my-app" | Select-Object FullName
          exit 1
        }
      displayName: Verify dist exists
      failOnStderr: true

    - task: ArchiveFiles@2
      displayName: Archive dist output
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/my-app/dist'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/dist.zip'
        replaceExistingArchive: true

    - publish: '$(Build.ArtifactStagingDirectory)/dist.zip'
      displayName: Publish artifact
      artifact: drop

- stage: Deploy
  displayName: Deploy to Azure
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    environment: production
    pool:
      name: my-pool
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: Deploy React app to Azure App Service
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              WebAppName: $(webAppName)
              packageForLinux: '$(Pipeline.Workspace)/drop/dist.zip'
              RuntimeStack: 'NODE|20-lts'
